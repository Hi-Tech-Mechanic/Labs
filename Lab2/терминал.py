from заказ import Заказ
from пицца import Пицца
from пицца import ПиццаПепперони
from пицца import ПиццаБарбекю
from пицца import ПиццаДарыМоря

class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ = "Успешный Успех"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: список заказанных пицц;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        # Доступные пиццы
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:

        Имя пиццерии, версия программы.
        """
        return self.КОМПАНИЯ + " Версия программы V.1.0.5"

    def показать_меню(self):
        """Показать меню.

        Показать меню следует только при наличии флага self.отображать_меню
        self.отображать_меню устанавливается в False после вывода меню.

        Формат вывода:

        Пиццерия #1
        Добро пожаловать!

        Меню:
        1. Пицца: Пепперони | Цена: 350.00 р.
           Тесто: тонкое Соус: томатный
           Начинка: пепперони, сыр моцарелла
        2. Пицца: Барбекю | Цена: 450.00 р.
           Тесто: тонкое Соус: барбекю
           Начинка: бекон, ветчина, зелень, сыр моцарелла
        3. Пицца: Дары моря | Цена: 550.00 р.
           Тесто: пышное Соус: тар-тар
           Начинка: кальмары, креветки, мидии, сыр моцарелла
        Для выбора укажите цифру через <ENTER>.
        Для отмены заказа введите -1
        Для подтверждения заказа введите 0
        """
        if not self.отображать_меню:
            return
        else:
            print("Пиццерия #1\nДобро пожаловать!\n\nМеню:")
            for пицца in self.меню:
                print(f"{self.меню.index(пицца)+1}. {пицца}")
            print("Для выбора укажите цифру через <ENTER>.\n"
            "Для отмены заказа введите -1\n"
            "Для подтверждения заказа введите 0")

            self.отображать_меню = False

    def обработать_команду(self, пункт_меню):
        """Обработать действие пользователя.

        Аргументы:
          - пункт_меню (str): выбор пользователя.

        Возможные значения "пункт_меню":
          - -1: отменить заказ;
          -  0: подтвердить заказ; при этом осуществляется
                выставление счета, оплата, а также выполняется заказ;
                после заказ удаляется (= None)
          - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                               если заказ не создан, его нужно создать.
          - иначе: сообщить о невозможности обработать команду.

        Каждое действие подтверждается выводом на экран, например:
        1
        Пицца Пепперони добавлена!
        2
        Пицца Барбекю добавлена!
        0
        Заказ подтвержен.
        """

        try:
            пункт_меню = int(пункт_меню)

            if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                if not self.заказ == None:
                    self.заказ == None
                    print("Заказ отменен")

                # Проверьте, что отмена вызывается для созданного заказа
            elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                if not self.заказ == None:
                    print(f"Сумма заказа: {self.заказ.сумма()}")
                    self.принять_оплату()
                    print(self.заказ.выполнить())                
                    self.заказ = None

                # Проверьте, что подтверждение вызывается для созданного заказа
                # При возникновении ошибки необходимо вызвать команду
                # отмены заказа
            elif 1 <= пункт_меню <= len(self.меню):
                if self.заказ == None:
                    self.заказ = Заказ()

                if not self.заказ == None:
                    match пункт_меню:
                        case 1:
                            self.заказ.добавить(ПиццаПепперони())
                        case 2:
                            self.заказ.добавить(ПиццаБарбекю())
                        case 3:
                            self.заказ.добавить(ПиццаДарыМоря())
                    print(self.заказ)

                # Если заказ не создан, его нужно предварительно создать
            else:
                # За границей меню передаем управление в обработку исключений
                raise ValueError("Вы вышли за границу меню")
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
        #except Exception:
        #    print("Во время работы терминала произошла ошибка...")

    def рассчитать_сдачу(self, оплата):
        """Вернуть сдачу для 'оплата'.

        Если оплата меньше стоимости заказа, возбудить исключение ValueError.
        """
        if (оплата >= self.заказ.сумма()):
            return f"Ваша сдача: {оплата - self.заказ.сумма()}"
        else:
            raise ValueError("Оплата меньше стоимости заказа")

    def принять_оплату(self):
        """Обработать оплату.

        Эмулирует оплату заказа (клиент вводит сумму с клавиатуры).

        Если сумма оплаты недостаточна (определяет метод рассчитать_сдачу())
        или возникает другая ошибка - исключние передается выше.
        """
        try:
            оплата = input("Введите ваши средства: ")
            оплата = int(оплата)
            print(self.рассчитать_сдачу(оплата))
        except Exception:
            print("Оплата не удалась. Заказ будет отменен.")
            raise